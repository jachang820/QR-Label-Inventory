/* Convert auto-incremented integer ID into a more compact serial
   for use on small labels. The serial field is a 6-digit base-36
   [0-9, A-Z] representation of the integer ID.

   The prefix is random digits that will be attached to each label
   URL, but stripped from the visible portion of the serial, to
   make it unlikely for an alias to mimic the internal serial
   format. 

   Inputs:
   id -- auto-increment id generated by sql
   type -- single, capital letter representing type of unit */

const PREFIX = 'P99Nk7';

const format = (id, type) => {
  const MAX_DIGIT = 6; /* Digits in serial. */

  let numId = parseInt(id);
  let serial = "";
  let digit;
  for (let i = 0; i < MAX_DIGIT; i++) {

    /* Left pad zero if end reached. */
    if (numId === 0) {
      serial = "0".repeat(MAX_DIGIT - i) + serial;
      break;
    }

    /* Conver to base 36. */
    digit = numId % 36;
    if (digit > 9) {
      digit = String.fromCharCode(55 + digit);
    } else {
      digit = digit.toString();
    }
    serial = digit + serial;
    numId = Math.floor(numId/36);
  }

  /* The output serial. */
  return `${PREFIX}${type}${serial}`;
};

const toBase36 = (type) => {
  return (unit, options) => {
    return unit.update({
      serial: format(unit.id, type)
    }, {
      skip: ['id', 'serial'],
      transaction: options.transaction
    });
  };
};

const notSerialFormat = (value) => {
  if (value.includes(PREFIX)) {
    throw new Error("Alias should not be in serial format.");
  }
};

let serial = {
  toBase36: toBase36,
  notSerialFormat: notSerialFormat
};

Object.defineProperty(serial, 'prefix', {
  value: PREFIX,
  writable: false
});

module.exports = serial;